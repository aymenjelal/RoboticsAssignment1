// Generated by gencpp from file question1/output.msg
// DO NOT EDIT!


#ifndef QUESTION1_MESSAGE_OUTPUT_H
#define QUESTION1_MESSAGE_OUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace question1
{
template <class ContainerAllocator>
struct output_
{
  typedef output_<ContainerAllocator> Type;

  output_()
    : posvectors()  {
      posvectors.assign(0.0);
  }
  output_(const ContainerAllocator& _alloc)
    : posvectors()  {
  (void)_alloc;
      posvectors.assign(0.0);
  }



   typedef boost::array<float, 3>  _posvectors_type;
  _posvectors_type posvectors;





  typedef boost::shared_ptr< ::question1::output_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::question1::output_<ContainerAllocator> const> ConstPtr;

}; // struct output_

typedef ::question1::output_<std::allocator<void> > output;

typedef boost::shared_ptr< ::question1::output > outputPtr;
typedef boost::shared_ptr< ::question1::output const> outputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::question1::output_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::question1::output_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::question1::output_<ContainerAllocator1> & lhs, const ::question1::output_<ContainerAllocator2> & rhs)
{
  return lhs.posvectors == rhs.posvectors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::question1::output_<ContainerAllocator1> & lhs, const ::question1::output_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace question1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::question1::output_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::question1::output_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::question1::output_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::question1::output_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::question1::output_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::question1::output_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::question1::output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fed4bf357af80e3105defd670115ff0e";
  }

  static const char* value(const ::question1::output_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfed4bf357af80e31ULL;
  static const uint64_t static_value2 = 0x05defd670115ff0eULL;
};

template<class ContainerAllocator>
struct DataType< ::question1::output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "question1/output";
  }

  static const char* value(const ::question1::output_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::question1::output_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] posvectors\n"
;
  }

  static const char* value(const ::question1::output_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::question1::output_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posvectors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct output_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::question1::output_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::question1::output_<ContainerAllocator>& v)
  {
    s << indent << "posvectors[]" << std::endl;
    for (size_t i = 0; i < v.posvectors.size(); ++i)
    {
      s << indent << "  posvectors[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.posvectors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUESTION1_MESSAGE_OUTPUT_H
