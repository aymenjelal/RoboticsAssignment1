// Generated by gencpp from file arm_gazebo/jointangles.msg
// DO NOT EDIT!


#ifndef ARM_GAZEBO_MESSAGE_JOINTANGLES_H
#define ARM_GAZEBO_MESSAGE_JOINTANGLES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_gazebo
{
template <class ContainerAllocator>
struct jointangles_
{
  typedef jointangles_<ContainerAllocator> Type;

  jointangles_()
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , arm_palm(0.0)
    , palm_finger(0.0)
    , finger_finger_tip(0.0)  {
    }
  jointangles_(const ContainerAllocator& _alloc)
    : joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , arm_palm(0.0)
    , palm_finger(0.0)
    , finger_finger_tip(0.0)  {
  (void)_alloc;
    }



   typedef float _joint1_type;
  _joint1_type joint1;

   typedef float _joint2_type;
  _joint2_type joint2;

   typedef float _joint3_type;
  _joint3_type joint3;

   typedef float _joint4_type;
  _joint4_type joint4;

   typedef double _arm_palm_type;
  _arm_palm_type arm_palm;

   typedef double _palm_finger_type;
  _palm_finger_type palm_finger;

   typedef double _finger_finger_tip_type;
  _finger_finger_tip_type finger_finger_tip;





  typedef boost::shared_ptr< ::arm_gazebo::jointangles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_gazebo::jointangles_<ContainerAllocator> const> ConstPtr;

}; // struct jointangles_

typedef ::arm_gazebo::jointangles_<std::allocator<void> > jointangles;

typedef boost::shared_ptr< ::arm_gazebo::jointangles > jointanglesPtr;
typedef boost::shared_ptr< ::arm_gazebo::jointangles const> jointanglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_gazebo::jointangles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_gazebo::jointangles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_gazebo::jointangles_<ContainerAllocator1> & lhs, const ::arm_gazebo::jointangles_<ContainerAllocator2> & rhs)
{
  return lhs.joint1 == rhs.joint1 &&
    lhs.joint2 == rhs.joint2 &&
    lhs.joint3 == rhs.joint3 &&
    lhs.joint4 == rhs.joint4 &&
    lhs.arm_palm == rhs.arm_palm &&
    lhs.palm_finger == rhs.palm_finger &&
    lhs.finger_finger_tip == rhs.finger_finger_tip;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_gazebo::jointangles_<ContainerAllocator1> & lhs, const ::arm_gazebo::jointangles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_gazebo::jointangles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_gazebo::jointangles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_gazebo::jointangles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_gazebo::jointangles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_gazebo::jointangles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_gazebo::jointangles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_gazebo::jointangles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6cb4ec54877c89eaedfc2a0339a0dead";
  }

  static const char* value(const ::arm_gazebo::jointangles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6cb4ec54877c89eaULL;
  static const uint64_t static_value2 = 0xedfc2a0339a0deadULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_gazebo::jointangles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_gazebo/jointangles";
  }

  static const char* value(const ::arm_gazebo::jointangles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_gazebo::jointangles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 joint1\n"
"float32 joint2\n"
"float32 joint3 \n"
"float32 joint4\n"
"float64 arm_palm\n"
"float64 palm_finger\n"
"float64 finger_finger_tip\n"
;
  }

  static const char* value(const ::arm_gazebo::jointangles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_gazebo::jointangles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.joint3);
      stream.next(m.joint4);
      stream.next(m.arm_palm);
      stream.next(m.palm_finger);
      stream.next(m.finger_finger_tip);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointangles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_gazebo::jointangles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_gazebo::jointangles_<ContainerAllocator>& v)
  {
    s << indent << "joint1: ";
    Printer<float>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<float>::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    Printer<float>::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    Printer<float>::stream(s, indent + "  ", v.joint4);
    s << indent << "arm_palm: ";
    Printer<double>::stream(s, indent + "  ", v.arm_palm);
    s << indent << "palm_finger: ";
    Printer<double>::stream(s, indent + "  ", v.palm_finger);
    s << indent << "finger_finger_tip: ";
    Printer<double>::stream(s, indent + "  ", v.finger_finger_tip);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_GAZEBO_MESSAGE_JOINTANGLES_H
